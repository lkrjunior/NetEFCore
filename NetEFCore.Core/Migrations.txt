Tool
dotnet tool install --global dotnet-ef

Create migrations and update (after model change)
dotnet ef migrations add InitialCreation -p ../NetEFCore.Core/ -s ../NetEFCore.API/ --verbose
dotnet ef migrations add InitialCreation -p ../NetEFCore.Core/ -s ../NetEFCore.API/
dotnet ef migrations add InitialCreation -p NetEFCore.Core/ -s NetEFCore.API/
dotnet ef migrations add InitialCreation
dotnet ef database update
dotnet ef database update -p ../NetEFCore.Core/ -s ../NetEFCore.API/ --verbose
dotnet ef database update -p NetEFCore.Core/ -s NetEFCore.API/



Migrate on startup
static void Configure(WebApplication app)
{
    if (app.Environment.IsDevelopment())
    {
        app.UseSwagger();
        app.UseSwaggerUI();
    }
    ...
    MigrateDatabase(app);
}

static void MigrateDatabase(WebApplication app)
{
    using var scope = app.Services.CreateScope();
    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    db.Database.Migrate();
}



Test
dotnet test NetEFCore.Test "--logger:trx;LogFileName=results.trx" /p:CollectCoverage=true /p:Exclude=[*]NetEFCore.Core.Infrastructure.*%2c[*]NetEFCore.Core.Interfaces.* /p:CoverletOutputFormat=opencover%2ccobertura /p:ThresholdType=method /p:Threshold=80
dotnet test NetEFCore.Test "--logger:trx;LogFileName=results.trx" /p:CollectCoverage=true /p:Exclude="[*]NetEFCore.Core.Infrastructure.*%2c[*]NetEFCore.Core.Interfaces.*" /p:CoverletOutputFormat=opencover%2ccobertura /p:ThresholdType=method /p:Threshold=80
dotnet test NetEFCore.Test "--logger:trx;LogFileName=results.trx" /p:CollectCoverage=true /p:Exclude="[*]NetEFCore.Core.Infrastructure.Data.*%2c[*]NetEFCore.Core.Interfaces.*%2c[*]NetEFCore.Core.Migrations.*" /p:CoverletOutputFormat=opencover%2ccobertura /p:ThresholdType=method /p:Threshold=80